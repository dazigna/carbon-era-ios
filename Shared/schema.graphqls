type Query {
  category(
    """The ID of the object"""
    id: ID!
  ): CategoryNode
  categories(offset: Int, before: String, after: String, first: Int, last: Int, name: String, uuid: UUID, parent_Name: String, parent_Name_Isnull: Boolean): CategoryNodeConnection
  item(
    """The ID of the object"""
    id: ID!
  ): ItemNode
  items(offset: Int, before: String, after: String, first: Int, last: Int, nameFr: String, nameFr_Icontains: String, nameFr_Istartswith: String, categoryStr: String, categoryStr_Icontains: String, categoryStr_Istartswith: String, category_Name: String, uuid: UUID, itemsByCategoryName: String): ItemNodeConnection
  unit(
    """The ID of the object"""
    id: ID!
  ): UnitNode
  units(offset: Int, before: String, after: String, first: Int, last: Int, name: String, quantity: String, uuid: UUID): UnitNodeConnection
}

type CategoryNode implements Node {
  """The ID of the object."""
  id: ID!

  """"""
  parent: CategoryNode

  """"""
  uuid: UUID!

  """"""
  name: String

  """"""
  children(offset: Int, before: String, after: String, first: Int, last: Int, name: String, uuid: UUID, parent_Name: String, parent_Name_Isnull: Boolean): CategoryNodeConnection!

  """"""
  itemSet(offset: Int, before: String, after: String, first: Int, last: Int, nameFr: String, nameFr_Icontains: String, nameFr_Istartswith: String, categoryStr: String, categoryStr_Icontains: String, categoryStr_Istartswith: String, category_Name: String, uuid: UUID, itemsByCategoryName: String): ItemNodeConnection!
}

"""An object with an ID"""
interface Node {
  """The ID of the object."""
  id: ID!
}

"""
Leverages the internal Python implmeentation of UUID (uuid.UUID) to provide native UUID objects
in fields, resolvers and input.
"""
scalar UUID

type CategoryNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [CategoryNodeEdge]!
}

"""
The Relay compliant `PageInfo` type, containing data necessary to paginate this connection.
"""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

"""A Relay edge containing a `CategoryNode` and its cursor."""
type CategoryNodeEdge {
  """The item at the end of the edge"""
  node: CategoryNode

  """A cursor for use in pagination"""
  cursor: String!
}

type ItemNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [ItemNodeEdge]!
}

"""A Relay edge containing a `ItemNode` and its cursor."""
type ItemNodeEdge {
  """The item at the end of the edge"""
  node: ItemNode

  """A cursor for use in pagination"""
  cursor: String!
}

type ItemNode implements Node {
  """The ID of the object."""
  id: ID!

  """"""
  uuid: UUID!

  """"""
  nameFr: String

  """"""
  nameEn: String

  """"""
  attributeFr: String

  """"""
  attributeEn: String

  """"""
  categoryStr: String

  """"""
  tagFr: String

  """"""
  tagEn: String

  """"""
  unitStr: String

  """"""
  confidence: Int

  """"""
  totalPoste: Float

  """"""
  co2f: Float

  """"""
  ch4f: Float

  """"""
  ch4b: Float

  """"""
  n2o: Float

  """"""
  co2b: Float

  """"""
  otherGhg: Float

  """"""
  category: CategoryNode

  """"""
  unit: UnitNode
}

type UnitNode implements Node {
  """The ID of the object."""
  id: ID!

  """"""
  uuid: UUID!

  """"""
  name: String

  """"""
  numerator: String

  """"""
  denominator: String

  """"""
  quantity: String

  """"""
  attribute: JSONString

  """"""
  itemSet(offset: Int, before: String, after: String, first: Int, last: Int, nameFr: String, nameFr_Icontains: String, nameFr_Istartswith: String, categoryStr: String, categoryStr_Icontains: String, categoryStr_Istartswith: String, category_Name: String, uuid: UUID, itemsByCategoryName: String): ItemNodeConnection!
}

"""
Allows use of a JSON String for input / output from the GraphQL schema.

Use of this type is *not recommended* as you lose the benefits of having a defined, static
schema (one of the key benefits of GraphQL).
"""
scalar JSONString

type UnitNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [UnitNodeEdge]!
}

"""A Relay edge containing a `UnitNode` and its cursor."""
type UnitNodeEdge {
  """The item at the end of the edge"""
  node: UnitNode

  """A cursor for use in pagination"""
  cursor: String!
}
